// import { Injectable, UnauthorizedException } from '@nestjs/common';
// import { ConfigService } from '@nestjs/config';
// import { PassportStrategy } from '@nestjs/passport';
// import { ExtractJwt, Strategy } from 'passport-jwt';
// import { UserService } from '../../user/user.service';
// import { Logger } from '@nestjs/common';

// const logger = new Logger('JwtStrategy');

// @Injectable()
// export class JwtStrategy extends PassportStrategy(Strategy) {
//   public constructor(
//     private readonly configService: ConfigService,
//     private readonly userService: UserService,
//   ) {
//     super({
//       jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
//       ignoreExpiration: false,
//       secretOrKey: configService.get('JWT_SECRET'),
//     });
//   }

//   async validate({ id }: { id: string }) {
//     console.log('üõÇ JWT id:', id); // ‚Üê —Ç—ã —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å
//     const user = await this.userService.getById(id);
//     console.log('üì¶ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
//     if (!user) {
//       throw new UnauthorizedException();
//     }

//     // return user;
//     return {
//       id: user.id,
//       email: user.email,
//       role: user.role,
//     };
//   }
// }

// auth/jwt.strategy.ts
import { Injectable } from '@nestjs/common';
import { PassportStrategy } from '@nestjs/passport';
import { ExtractJwt, Strategy } from 'passport-jwt';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../../user/user.service';

type JwtPayload = { sub: string; isGuest?: boolean };

// @Injectable()
// export class JwtStrategy extends PassportStrategy(Strategy) {
//   constructor(cfg: ConfigService, private readonly users: UserService) {
//     super({
//       secretOrKey: cfg.get<string>('JWT_SECRET'),
//       jwtFromRequest: ExtractJwt.fromExtractors([
//         ExtractJwt.fromAuthHeaderAsBearerToken(),
//         (req) =>
//           req?.cookies?.access_token ?? req?.cookies?.guest_token ?? null, // –µ—Å–ª–∏ —Ä–µ—à–∏—à—å –∫–ª–∞—Å—Ç—å –≤ cookie
//       ]),
//     });
//   }

//   async validate(payload: any) {
//     if (payload?.isGuest) {
//       // –≥–æ—Å—Ç—å ‚Äî –º–æ–∂–Ω–æ –Ω–µ —Ö–æ–¥–∏—Ç—å –≤ –ë–î
//       return { id: payload.id, isGuest: true };
//     }
//     const user = await this.users.getById(payload.id);
//     return user ? { ...user, isGuest: false } : null;
//   }
// }

@Injectable()
export class JwtStrategy extends PassportStrategy(Strategy) {
  constructor(cfg: ConfigService, private readonly users: UserService) {
    super({
      secretOrKey: cfg.get<string>('JWT_SECRET'),
      jwtFromRequest: ExtractJwt.fromExtractors([
        ExtractJwt.fromAuthHeaderAsBearerToken(),
        (req) =>
          // üëá –¥–æ–±–∞–≤–∏–ª–∏ —á—Ç–µ–Ω–∏–µ accessToken (–∏–º–µ–Ω–Ω–æ —Ç–∞–∫ cookie –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —É —Ñ—Ä–æ–Ω—Ç–∞)
          req?.cookies?.accessToken ??
          req?.cookies?.access_token ??
          req?.cookies?.guest_token ??
          null,
      ]),
    });
  }

  async validate(payload: any) {
    // –ù–µ—Ç payload –∏–ª–∏ –Ω–µ—Ç id ‚Üí —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç
    if (!payload || !payload.id) return null;

    // –í–µ—Ç–∫–∞ –≥–æ—Å—Ç—è: –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –ø–æ TTL ‚Üí –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (payload.isGuest) {
      try {
        const guest = await this.users.getById(payload.id);
        if (guest && (guest as any).isGuest) {
          return { id: guest.id, isGuest: true };
        }
      } catch {}
      // –ì–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Üí –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç
      return null;
    }

    // –í–µ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.users.getById(payload.id);
    return user ? { ...user, isGuest: false } : null;
  }
}
